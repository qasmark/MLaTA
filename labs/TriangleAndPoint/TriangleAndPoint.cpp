/*
19.19. Треугольник и точка (4)
	В декартовой системе координат на плоскости заданы координаты вершин треугольника и еще одной точки. 
	Определить, принадлежит ли эта точка треугольнику.
	Ввод из файла INPUT.TXT. В четырех строках находятся пары чисел - координаты точек. 
	Числа в первых трех строках - это координаты вершин треугольника, в четвертой строке - координаты тестируемой точки.
	Вывод в файл OUTPUT.TXT. Вывести In, если точка находится внутри треугольника, или Out - если снаружи.
	Ограничения: координаты вершин - целые числа, для любой точки выполняются следующие условия: -10^9 ≤ x, y ≤ 10^9.
	Примеры
	Ввод 1    Ввод 2    Ввод 3    Ввод 4
	0 0       0 0       0 0       0 0
	100 0     100 0     100 0     100 0
	0 100     0 100     0 100     0 100
	100 100   10 10     50 50     0 0
	Вывод 1   Вывод 2   Вывод 3   Вывод 4
	Out       In        In        In
	
Ввод 5
0 0
1000000000 0
0 1000000000
1000000000 1000000000
Вывод 5
Out

Ввод 6
0 0
1000000000 0
0 1000000000
0 0
Вывод 6
In

Суть решения: 
	Нашел способ сравнения площадей на сайте, реализовал его. Для тестовых данных (порядка 10^9) использовал long double, так как
	его диапазон от +-1.9*10^(-4932) до +-1.9*10^(4932) что куда больше чем от  -1,000,000,000,000,000,000
	до 1,000,000,000,000,000,000 (это 10^9 * 10^9)
	Выше показаны мои тесты с данными максимальной величины


	Игнатьев Влад, ПС-22
	Visual Studio Community 2022


*/
#include <fstream>
using namespace std;

struct Point {
	long double x, y;
};

double area(Point A, Point B, Point C) {
	return abs((A.x * (B.y - C.y) + B.x * (C.y - A.y) + C.x * (A.y - B.y)) / 2.0);
}

int main() {
	ifstream fin("input.txt");
	ofstream fout("output.txt");
	Point A, B, C, P;

	fin >> A.x >> A.y >> B.x >> B.y >> C.x >> C.y >> P.x >> P.y;

	long double ABC = area(A, B, C);
	long double PAB = area(P, A, B);
	long double PBC = area(P, B, C);
	long double PAC = area(P, A, C);

	fout << ((PAB + PBC + PAC == ABC) ? "In" : "Out") << endl;
	return 0;
}